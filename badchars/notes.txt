badchars: x g a .

$ objdump -M intel -D ./badchars
0000000000400628 <usefulGadgets>:
  400628:       45 30 37                xor    BYTE PTR [r15],r14b
  40062b:       c3                      ret    
  40062c:       45 00 37                add    BYTE PTR [r15],r14b
  40062f:       c3                      ret    
  400630:       45 28 37                sub    BYTE PTR [r15],r14b
  400633:       c3                      ret    
  400634:       4d 89 65 00             mov    QWORD PTR [r13+0x0],r12
  400638:       c3                      ret    
  400639:       0f 1f 80 00 00 00 00    nop    DWORD PTR [rax+0x0]


$ ropper --file badchars --badbytes 7867612E       
[INFO] Load gadgets for section: LOAD
[LOAD] loading... 100%
[LOAD] filtering badbytes... 100%
[LOAD] removing double gadgets... 100%



Gadgets
=======


0x000000000040057e: adc byte ptr [rax], ah; jmp rax; 
0x00000000004004df: adc eax, 0x4800200b; test eax, eax; je 0x4ea; call rax; 
0x00000000004004df: adc eax, 0x4800200b; test eax, eax; je 0x4ea; call rax; add rsp, 8; ret; 
0x000000000040054f: add bl, dh; ret; 
0x000000000040062c: add byte ptr [r15], r14b; ret; 
0x00000000004004e2: add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x00000000004006ad: add byte ptr [rax], al; add bl, dh; ret; 
0x00000000004006ab: add byte ptr [rax], al; add byte ptr [rax], al; add bl, dh; ret; 
0x0000000000400611: add byte ptr [rax], al; add byte ptr [rax], al; pop rbp; ret; 
0x0000000000400586: add byte ptr [rax], al; pop rbp; ret; 
0x00000000004006b2: add byte ptr [rax], al; sub rsp, 8; add rsp, 8; ret; 
0x0000000000400574: add byte ptr [rax], al; test rax, rax; je 0x588; pop rbp; mov edi, 0x601038; jmp rax; 
0x00000000004005b6: add byte ptr [rax], al; test rax, rax; je 0x5c8; pop rbp; mov edi, 0x601038; jmp rax; 
0x0000000000400585: add byte ptr [rax], r8b; pop rbp; ret; 
0x00000000004005e7: add byte ptr [rcx], al; pop rbp; ret; 
0x000000000040062d: add byte ptr [rdi], dh; ret; 
0x00000000004004de: add eax, 0x200b15; test rax, rax; je 0x4ea; call rax; 
0x00000000004004de: add eax, 0x200b15; test rax, rax; je 0x4ea; call rax; add rsp, 8; ret; 
0x00000000004004eb: add esp, 8; ret; 
0x00000000004004ea: add rsp, 8; ret; 
0x00000000004004e1: and byte ptr [rax], al; test rax, rax; je 0x4ea; call rax; 
0x00000000004004e1: and byte ptr [rax], al; test rax, rax; je 0x4ea; call rax; add rsp, 8; ret; 
0x000000000040060b: call 0x500; mov eax, 0; pop rbp; ret; 
0x0000000000400620: call 0x510; nop; pop rbp; ret; 
0x00000000004005dd: call 0x560; mov byte ptr [rip + 0x200a4f], 1; pop rbp; ret; 
0x000000000040070f: call qword ptr [rax + 1]; 
0x00000000004007a3: call qword ptr [rax]; 
0x00000000004007c3: call qword ptr [rcx]; 
0x00000000004004e8: call rax; 
0x00000000004004e8: call rax; add rsp, 8; ret; 
0x000000000040068c: fmul qword ptr [rax - 0x7d]; ret; 
0x00000000004004da: in al, dx; or byte ptr [rax - 0x75], cl; add eax, 0x200b15; test rax, rax; je 0x4ea; call rax; 
0x00000000004004e6: je 0x4ea; call rax; 
0x00000000004004e6: je 0x4ea; call rax; add rsp, 8; ret; 
0x0000000000400579: je 0x588; pop rbp; mov edi, 0x601038; jmp rax; 
0x00000000004005bb: je 0x5c8; pop rbp; mov edi, 0x601038; jmp rax; 
0x00000000004006e7: jmp qword ptr [rax]; 
0x00000000004007e3: jmp qword ptr [rbp]; 
0x0000000000400581: jmp rax; 
0x00000000004005e2: mov byte ptr [rip + 0x200a4f], 1; pop rbp; ret; 
0x0000000000400606: mov dword ptr [rbp + 0x48], edx; mov ebp, esp; call 0x500; mov eax, 0; pop rbp; ret; 
0x0000000000400635: mov dword ptr [rbp], esp; ret; 
0x0000000000400610: mov eax, 0; pop rbp; ret; 
0x00000000004004dd: mov eax, dword ptr [rip + 0x200b15]; test rax, rax; je 0x4ea; call rax; 
0x00000000004004dd: mov eax, dword ptr [rip + 0x200b15]; test rax, rax; je 0x4ea; call rax; add rsp, 8; ret; 
0x0000000000400609: mov ebp, esp; call 0x500; mov eax, 0; pop rbp; ret; 
0x00000000004005db: mov ebp, esp; call 0x560; mov byte ptr [rip + 0x200a4f], 1; pop rbp; ret; 
0x0000000000400619: mov ebp, esp; mov edi, 0x4006c4; call 0x510; nop; pop rbp; ret; 
0x000000000040061b: mov edi, 0x4006c4; call 0x510; nop; pop rbp; ret; 
0x000000000040057c: mov edi, 0x601038; jmp rax; 
0x0000000000400634: mov qword ptr [r13], r12; ret; 
0x00000000004004dc: mov rax, qword ptr [rip + 0x200b15]; test rax, rax; je 0x4ea; call rax; 
0x00000000004004dc: mov rax, qword ptr [rip + 0x200b15]; test rax, rax; je 0x4ea; call rax; add rsp, 8; ret; 
0x0000000000400608: mov rbp, rsp; call 0x500; mov eax, 0; pop rbp; ret; 
0x00000000004005da: mov rbp, rsp; call 0x560; mov byte ptr [rip + 0x200a4f], 1; pop rbp; ret; 
0x0000000000400618: mov rbp, rsp; mov edi, 0x4006c4; call 0x510; nop; pop rbp; ret; 
0x0000000000400583: nop dword ptr [rax + rax]; pop rbp; ret; 
0x00000000004005c5: nop dword ptr [rax]; pop rbp; ret; 
0x00000000004005e5: or ah, byte ptr [rax]; add byte ptr [rcx], al; pop rbp; ret; 
0x00000000004004db: or byte ptr [rax - 0x75], cl; add eax, 0x200b15; test rax, rax; je 0x4ea; call rax; 
0x00000000004004e0: or esp, dword ptr [rax]; add byte ptr [rax - 0x7b], cl; sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x00000000004005e4: or r12b, byte ptr [r8]; add byte ptr [rcx], al; pop rbp; ret; 
0x000000000040069c: pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000040069e: pop r13; pop r14; pop r15; ret; 
0x00000000004006a0: pop r14; pop r15; ret; 
0x00000000004006a2: pop r15; ret; 
0x000000000040057b: pop rbp; mov edi, 0x601038; jmp rax; 
0x000000000040069b: pop rbp; pop r12; pop r13; pop r14; pop r15; ret; 
0x000000000040069f: pop rbp; pop r14; pop r15; ret; 
0x0000000000400588: pop rbp; ret; 
0x00000000004006a3: pop rdi; ret; 
0x00000000004006a1: pop rsi; pop r15; ret; 
0x000000000040069d: pop rsp; pop r13; pop r14; pop r15; ret; 
0x0000000000400607: push rbp; mov rbp, rsp; call 0x500; mov eax, 0; pop rbp; ret; 
0x00000000004005d9: push rbp; mov rbp, rsp; call 0x560; mov byte ptr [rip + 0x200a4f], 1; pop rbp; ret; 
0x0000000000400293: ret 0xb2ec; 
0x00000000004004e5: sal byte ptr [rdx + rax - 1], 0xd0; add rsp, 8; ret; 
0x0000000000400630: sub byte ptr [r15], r14b; ret; 
0x0000000000400631: sub byte ptr [rdi], dh; ret; 
0x00000000004006b5: sub esp, 8; add rsp, 8; ret; 
0x00000000004004d9: sub esp, 8; mov rax, qword ptr [rip + 0x200b15]; test rax, rax; je 0x4ea; call rax; 
0x00000000004006b4: sub rsp, 8; add rsp, 8; ret; 
0x00000000004004d8: sub rsp, 8; mov rax, qword ptr [rip + 0x200b15]; test rax, rax; je 0x4ea; call rax; 
0x00000000004004e4: test eax, eax; je 0x4ea; call rax; 
0x00000000004004e4: test eax, eax; je 0x4ea; call rax; add rsp, 8; ret; 
0x0000000000400577: test eax, eax; je 0x588; pop rbp; mov edi, 0x601038; jmp rax; 
0x00000000004005b9: test eax, eax; je 0x5c8; pop rbp; mov edi, 0x601038; jmp rax; 
0x00000000004004e3: test rax, rax; je 0x4ea; call rax; 
0x00000000004004e3: test rax, rax; je 0x4ea; call rax; add rsp, 8; ret; 
0x0000000000400576: test rax, rax; je 0x588; pop rbp; mov edi, 0x601038; jmp rax; 
0x00000000004005b8: test rax, rax; je 0x5c8; pop rbp; mov edi, 0x601038; jmp rax; 
0x0000000000400628: xor byte ptr [r15], r14b; ret; 
0x0000000000400629: xor byte ptr [rdi], dh; ret; 
0x0000000000400625: nop; pop rbp; ret; 
0x00000000004004ee: ret; 

95 gadgets found